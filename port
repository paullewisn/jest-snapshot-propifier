import React, { ExoticComponent, ReactElement, isValidElement } from 'react'
import { ReactTestRendererJSON, create } from 'react-test-renderer'
import snake from 'lodash.snakecase'

const snapshotOf: (
    component: ReactElement | JSX.Element | ExoticComponent
) => ReactTestRendererJSON | ReactTestRendererJSON[] = (component) =>
    create(component).toJSON()

type mockUtilTypeType = {
    name: string
    props?: Record<string, unknown>
}

type mockUtilType = ({ name, props }: mockUtilTypeType) => jest.Mock

type mockComponentType = {
    $name: string
}

const recursivelyProcessProps = (propName, propValue) => {
    switch (true) {
        case isValidElement(propValue):
            return '[! Component to test !]'

        case typeof propValue === 'function':
            return '[! Function to test !]'

        case typeof propValue === 'object' && propValue.length === undefined:
            return JSON.stringify(propValue)

        case typeof propValue === 'object' && propValue.length >= 0:
            return propValue.map((value) => {
                const isMock = !!value?.type?.getMockName

                const childPropName = isMock && value?.type?.getMockName()
                return recursivelyProcessProps(childPropName || propName, value)
            })

        default:
            return propValue
    }
}

const MockComponent: React.FC<mockComponentType> = ({
    $name,
    children,
    ...props
}) => {
    const dataProps = Object.entries(props).reduce(
        (acc, [prop, val]) => {
            return {
                ...acc,
                [`data-${snake(prop)}`]: recursivelyProcessProps(prop, val),
            }
        },
        { ['data-component']: `<${$name} />` }
    )

    return (
        <div {...dataProps}>
            {typeof children === 'function' ? children(props) : children}
        </div>
    )
}

const createMock: mockUtilType = ({ name, props }) =>
    jest
        .fn((override = {}) => (
            <MockComponent $name={name} {...props} {...override} />
        ))
        .mockName(name)

export { snapshotOf, createMock }

export * from './jestHelpers'
